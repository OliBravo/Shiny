library(DT)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp('~/_Repos/___PRIV/my_apps/shiny/Leaflet/tmap')
runApp('~/_Repos/___PRIV/my_apps/shiny/Leaflet/tmap')
runApp('~/_Repos/___PRIV/my_apps/shiny/Leaflet/tmap')
runApp('~/_Repos/___PRIV/my_apps/shiny/Leaflet/tmap')
runApp('~/_Repos/___PRIV/my_apps/shiny/Leaflet/tmap')
runApp('~/_Repos/___PRIV/my_apps/shiny/Leaflet/tmap')
shpfile <- list.files("Polska_Niemcy", pattern = ".shp", full.names = TRUE)
shpfile
runApp('~/_Repos/___PRIV/my_apps/shiny/Leaflet/tmap')
tmaptools::palette_explorer()
runApp('~/_Repos/___PRIV/my_apps/shiny/Leaflet/tmap')
######################
#  CWM audyt danych  #
######################
library(dplyr)
library(sqldf)
library(Hmisc)
old.par<-par()
par(cex=.6)
attach(art)
setwd("~/Carl Wilh. Meyer/CW_Meyer/client_data/2017.07.07 (update source data)/_csv")
# There is a lot of empty strings and white consecutive spaces so it needs to be cleared;
# defining NA strings:
spaces<-function(t) {
s<-rep("",t+1)
for (i in 1:t) {
s[i+1]<-paste(rep(" ",i),collapse="")
}
return(s)
}
NAs<-spaces(10)
NAs
# 1.artikeldaten
art<-read.csv(file="Artikeldaten.csv",strip.white = TRUE, na.strings = NAs)
setwd("~/Carl Wilh. Meyer/CW_Meyer/client_data/_csv")
View(art)
# 2.kundendaten
#kunden<-read.csv("Kundendaten.csv")
kunden<-read.csv("Kundendaten2.csv",strip.white = TRUE, na.strings = NAs)
# 3.kundenartikelkonditionen
kundartkon<-read.csv("Kundenartikelkonditionen.csv",strip.white = TRUE,
na.strings = NAs)
# 3.1.kundensortimentkonditionen
kundsort<-read.csv("Kundensortimentskonditionen.csv",strip.white = TRUE,
na.strings = NAs)
read.csv.JM<-function(x) {
read.csv(x,strip.white = TRUE,
na.strings = NAs)
}
summary(art)
# duplikaty
sql<-sqldf("SELECT [X.Artikelnummer], artikel, COUNT(artikel) as 'no.occurance'
FROM art
GROUP BY [X.Artikelnummer], artikel
HAVING COUNT(artikel)>1;")
sql
sqldf("select count(distinct [X.Artikelnummer]) from art")
art %>% summarise(n_distinct(X.Artikelnummer))
art %>% summarise(n_distinct(artikelwarenhauptgruppe))
art %>% group_by(artikelwarenhauptgruppe) %>% select(artikelwarenhauptgruppe)
art %>% group_by(artikelwarenhauptgruppe) %>% summarise(n())
art %>% group_by(artikelwarenhauptgruppe) %>% summarise(count = n()) %>% arrange(desc(count()))
art %>% group_by(artikelwarenhauptgruppe) %>% summarise(count = n()) %>% arrange(desc(count)
)
sqldf("select count (distinct [X.Kundennummer]) from kunden")
art.valid.data<-art$artikelanlagedatum!="..20"
bp<-barplot(prop.table(table(valid.dates)),
main="Invalid entries in the field 'artikelanlagedatum'",
sub="FALSE = invalid entry",
col=c("darkred","darkgreen"),ylim=c(0,1))
#   daty
sql.invalid.dates<-sqldf("SELECT DISTINCT artikelanlagedatum
FROM art
WHERE artikelanlagedatum LIKE '%.%'
ORDER BY 1 desc;")
sql.invalid.dates
art$valid.dates<-!(is.element(artikelanlagedatum,sql.invalid.dates[,1]))
attach(art)
art$valid.dates<-!(is.element(artikelanlagedatum,sql.invalid.dates[,1]))
art.valid.data<-art$artikelanlagedatum!="..20"
bp<-barplot(prop.table(table(valid.dates)),
main="Invalid entries in the field 'artikelanlagedatum'",
sub="FALSE = invalid entry",
col=c("darkred","darkgreen"),ylim=c(0,1))
attach(art)
bp<-barplot(prop.table(table(valid.dates)),
main="Invalid entries in the field 'artikelanlagedatum'",
sub="FALSE = invalid entry",
col=c("darkred","darkgreen"),ylim=c(0,1))
text(bp,0.2,paste(round(prop.table(table(valid.dates)),digits=3)*100,"%"))
barplot(table(art$artikelanlagedatum_mmjjjj))
barplot(table(art$artikelanlagedatum_mmjjjj[which(art$artikelanlagedatum_mmjjjj!='')]),las=1)
dotchart(table(art$artikelanlagedatum_mmjjjj[which(art$artikelanlagedatum_mmjjjj!='')]))
mths<-as.numeric(substr(art$artikelanlagedatum_mmjjjj[which(art$artikelanlagedatum_mmjjjj!='')],
start=1,
stop=nchar(as.vector(art$artikelanlagedatum_mmjjjj[which(art$artikelanlagedatum_mmjjjj!='')]))-7
))
yrs<-as.numeric(substr(art$artikelanlagedatum_mmjjjj[which(art$artikelanlagedatum_mmjjjj!='')],
start=nchar(as.vector(art$artikelanlagedatum_mmjjjj[which(art$artikelanlagedatum_mmjjjj!='')]))-3,
stop=nchar(as.vector(art$artikelanlagedatum_mmjjjj[which(art$artikelanlagedatum_mmjjjj!='')]))
))
art.mmjjjj<-cbind(mths,yrs)
row.names(art.mmjjjj)<-art$artikelanlagedatum_mmjjjj[which(art$artikelanlagedatum_mmjjjj!='')]
head(art.mmjjjj,25)
x<-yrs*100+mths
# grupy towarowe
par(mar=c(4,16,4,2),cex=.6)
tbl<-table(art$artikelwarenhauptgruppe)
tbl<-tbl[order(tbl,decreasing=F)]
bp<-barplot(tbl,las=2, main="Number of articles in asortment categories \n (1st-level category)", cex.main=2,
horiz = T,col="deepskyblue4")
text(5000,bp+1,labels=tbl,las=2,pos=1,col="grey")
par(old.par)
# jednostki cenowe
barplot(table(artikelpreiseinheit),
main="Distribution of price units (preiseinheit)")
# artikelzolltariffnummer
sql<-sqldf("SELECT DISTINCT artikelzolltarifnummer
FROM art
ORDER BY 1 desc
LIMIT 25;")
sql
summary(artikelzolltarifnummer)
# status
barplot(prop.table(table(artikelstatus)),
ylim=c(0,1),
main="Artikelstatus",
col=c("darkred",rep("gray55",3)))
describe(art)
