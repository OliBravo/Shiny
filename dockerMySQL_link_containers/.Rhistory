MATCH
MATCH$
id
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
Matches$already_bet
names(Matches$already_bet)
str(Matches$already_bet)
str(Matches$to_bet)
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
str(Matches$to_bet)
str(Matches$already_bet)
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
str(Matches$to_bet)
str(Matches$already_bet)
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
View(match_insert)
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
View(match_insert)
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
View(match_insert)
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
View(match_insert)
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
sprintf("execute usp_Bets_insert
@login = %s,
@match_id = %s,
@team1 = %s,
@team2 = %s,
@penalties_winner = %s
",
user$login, match_id, input[['bet-team1-score']], input[['bet-team2-score']],
ifelse(is.null(pen_win), "NULL", pen_win))
sprintf(
"execute usp_Bets_update %s, %s, %s, %s, %s",
match_insert$bet1,
match_insert$bet2,
ifelse(is.null(pen_win), "NULL", pen_win),
match_id,
user$login)
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
Matches$already_bet
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
Matches$already_bet %>% select(match_id, team1, team2, bet1,
bet2, winner_after_penalties, date, time, group) %>%
arrange(match_id)
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
ifelse(match$winner_after_penalties == 1,
match$team1, ifelse(match$winner_after_penalties == 2, match$team2,
NULL))
match$winner_after_penalties
match$winner_after_penalties == 1
match
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
View(match)
View(match)
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
Matches$already_bet
Matches$already_bet %>% select(match_id, team1, team2, bet1,
bet2, winner_after_penalties, date, time, group)
Matches$already_bet %>% select(match_id, team1, team2, bet1,
bet2, winner_after_penalties, date, time, group) %>%
mutate(winner_after_penalties = ifelse(is.na(winner_after_penalties),
NULL, ifelse(winner_after_penalties == 1, as.character(team1),
as.character(team2))))
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
Matches$already_bet %>% select(match_id, team1, team2, bet1,
bet2, winner_after_penalties, date, time, group) %>%
mutate(winner_after_penalties = ifelse(is.na(winner_after_penalties),
NA, ifelse(winner_after_penalties == 1, as.character(team1),
as.character(team2))))
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
Matches$already_bet %>% select(match_id, team1, team2, bet1,
bet2, winner_after_penalties, date, time, group)
Matches$already_bet %>% select(match_id, team1, team2, bet1,
bet2, winner_after_penalties, date, time, group)
Matches$already_bet
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
Matches$already_bet
Matches$already_bet
Matches$already_bet %>% select(match_id, team1, team2, bet1,
bet2, winner_after_penalties, date, time, group)
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
runApp('Shiny/MyFirstShinyApplications/Mundial2018')
idx <- grep(pattern = "^[^X_*].*", names(sales_tmp))
source('~/_Repos/MMM_Konig_Pilsner/Kuba/weather_data/scraping_from_wunderground.R', encoding = 'UTF-8', echo=TRUE)
#### libraries:----
library(rvest)
library(httr)
library(lubridate)
library(dplyr)
## helper functions:----
extract_table_and_location_nodes <- function(my_xml_node){
tnode <- my_xml_node[['table']][[1]]
lnode <- my_xml_node[['airport_date']]
return(list(node = tnode,
location = lnode))
}
extract_code_and_date <- function(location){
airport_code <- gsub(x = location, pattern = '^([A-Z]{4}).*', replacement = '\\1')
date <- gsub(x = location, pattern = '^[A-Z].*([0-9]{4}/.*/.*)', replacement = '\\1')
return(list(airport_code = airport_code,
date = date))
}
extract_first_row_headers <- function(node){
header <- xml_node(node, 'thead') %>% xml_node('tr')
header2 <- xml_node(node, 'tbody') %>% xml_node('tr')
header.len <- length(xml_children(header))
header2.len <- length(xml_children(header2))
h1 <- NULL
h2 <- NULL
for(i in 1:header.len){
txt <- html_text(xml_child(header, i))
# print(txt)
# print(xml_attrs(
#   xml_child(header, i)
# ))
if (class(try(xml_attrs(xml_child(header, i))[['colspan']], silent = T)) == 'try-error'){
h1 <- c(h1, txt)
} else {
n <- as.numeric(xml_attrs(xml_child(header, i))[['colspan']])
h1 <- c(h1, rep(txt, n))
}
}
for (j in 1:header2.len){
txt2 <- html_text(xml_child(header2, j))
txt2 <- ifelse(txt2 == ' ', '', txt2)
h2 <- c(h2, txt2)
}
h <- paste(h1, h2, sep = " ")
h <- gsub(pattern = '[()Â°/\\.\\%]',
x = h,
replacement = '')
h <- gsub(x = h,
pattern = '\\s',
replacement = '_')
h <- gsub(x = h,
pattern = '__',
replacement = '_')
h <- gsub(x = h,
pattern = '_$',
replacement = '')
h
}
# main: ----
build_dataframe_from_xml_table <- function(my_node){
node_loc <- extract_table_and_location_nodes(my_xml_node = my_node)
node <- node_loc[['node']]
location <- node_loc$location
# there are two identical names which we have to replace with correct names:
nms <- extract_first_row_headers(node = node)
nms[1] <- "day"
wrong <- nms[grep(x = nms, pattern = 'Wind.*high')][2]
nms[grep(x = nms, pattern = 'Wind.*high')][2] <- gsub(x = wrong, pattern = '(Wind.*)high', replacement = '\\1gust')
nms
tdata <- xml_nodes(node, 'tbody') %>% xml_nodes('tr')
tdata[[1]] <- NULL # the first <tr> is in fact (sub)header row, we exclude the row
res.list <- lapply(tdata, function(i){
tds <- xml_children(i)
res <- gsub(x = (unlist(lapply(tds, function(x) html_text(x)))),
pattern = "\n",
replacement = '')
res
})
res.df <- t(as.data.frame(res.list, row.names = nms))
row.names(res.df) <- NULL
airport_date <- extract_code_and_date(location)
res.df <- as.data.frame(res.df) %>%
mutate(location = airport_date$airport_code,
date = airport_date$date) %>%
mutate(year = year(date),
month = month(date)) %>%
select(-one_of("date"))
View(res.df)
res.df
}
RES.LIST <- lapply(ES.list[[2]], function(i) build_dataframe_from_xml_table(i))
# main: ----
build_dataframe_from_xml_table <- function(my_node){
browser()
node_loc <- extract_table_and_location_nodes(my_xml_node = my_node)
node <- node_loc[['node']]
location <- node_loc$location
# there are two identical names which we have to replace with correct names:
nms <- extract_first_row_headers(node = node)
nms[1] <- "day"
wrong <- nms[grep(x = nms, pattern = 'Wind.*high')][2]
nms[grep(x = nms, pattern = 'Wind.*high')][2] <- gsub(x = wrong, pattern = '(Wind.*)high', replacement = '\\1gust')
nms
tdata <- xml_nodes(node, 'tbody') %>% xml_nodes('tr')
tdata[[1]] <- NULL # the first <tr> is in fact (sub)header row, we exclude the row
res.list <- lapply(tdata, function(i){
tds <- xml_children(i)
res <- gsub(x = (unlist(lapply(tds, function(x) html_text(x)))),
pattern = "\n",
replacement = '')
res
})
res.df <- t(as.data.frame(res.list, row.names = nms))
row.names(res.df) <- NULL
airport_date <- extract_code_and_date(location)
res.df <- as.data.frame(res.df) %>%
mutate(location = airport_date$airport_code,
date = airport_date$date) %>%
mutate(year = year(date),
month = month(date)) %>%
select(-one_of("date"))
View(res.df)
res.df
}
RES.LIST <- lapply(ES.list[[2]], function(i) build_dataframe_from_xml_table(i))
# main: ----
build_dataframe_from_xml_table <- function(my_node){
browser()
node_loc <- extract_table_and_location_nodes(my_xml_node = my_node)
node <- node_loc[['node']]
location <- node_loc$location
# there are two identical names which we have to replace with correct names:
nms <- extract_first_row_headers(node = node)
nms[1] <- "day"
wrong <- nms[grep(x = nms, pattern = 'Wind.*high')][2]
nms[grep(x = nms, pattern = 'Wind.*high')][2] <- gsub(x = wrong, pattern = '(Wind.*)high', replacement = '\\1gust')
# nms
tdata <- xml_nodes(node, 'tbody') %>% xml_nodes('tr')
tdata[[1]] <- NULL # the first <tr> is in fact (sub)header row, we exclude the row
res.list <- lapply(tdata, function(i){
tds <- xml_children(i)
res <- gsub(x = (unlist(lapply(tds, function(x) html_text(x)))),
pattern = "\n",
replacement = '')
res
})
res.df <- t(as.data.frame(res.list, row.names = nms))
row.names(res.df) <- NULL
airport_date <- extract_code_and_date(location)
res.df <- as.data.frame(res.df) %>%
mutate(location = airport_date$airport_code,
date = airport_date$date) %>%
mutate(year = year(date),
month = month(date)) %>%
select(-one_of("date"))
# View(res.df)
res.df
}
RES.LIST <- lapply(ES.list[[2]], function(i) {
print(paste('iteration:', n))
r <- try(build_dataframe_from_xml_table(i))
if (class(r) == 'try-error'){
print(cat("ERROR \n -------------------------------"))
}
n <<- n + 1
r
})
# main: ----
build_dataframe_from_xml_table <- function(my_node){
node_loc <- extract_table_and_location_nodes(my_xml_node = my_node)
node <- node_loc[['node']]
location <- node_loc$location
# there are two identical names which we have to replace with correct names:
nms <- extract_first_row_headers(node = node)
nms[1] <- "day"
wrong <- nms[grep(x = nms, pattern = 'Wind.*high')][2]
nms[grep(x = nms, pattern = 'Wind.*high')][2] <- gsub(x = wrong, pattern = '(Wind.*)high', replacement = '\\1gust')
# nms
tdata <- xml_nodes(node, 'tbody') %>% xml_nodes('tr')
tdata[[1]] <- NULL # the first <tr> is in fact (sub)header row, we exclude the row
res.list <- lapply(tdata, function(i){
tds <- xml_children(i)
res <- gsub(x = (unlist(lapply(tds, function(x) html_text(x)))),
pattern = "\n",
replacement = '')
res
})
res.df <- t(as.data.frame(res.list, row.names = nms))
row.names(res.df) <- NULL
airport_date <- extract_code_and_date(location)
res.df <- as.data.frame(res.df) %>%
mutate(location = airport_date$airport_code,
date = airport_date$date) %>%
mutate(year = year(date),
month = month(date)) %>%
select(-one_of("date"))
# View(res.df)
res.df
}
n <- 1
RES.LIST <- lapply(ES.list[[2]], function(i) {
print(paste('iteration:', n))
r <- try(build_dataframe_from_xml_table(i))
if (class(r) == 'try-error'){
print(cat("ERROR \n -------------------------------"))
}
n <<- n + 1
r
})
View(RES.LIST)
View(RES.LIST[[1]])
save(RES.LIST,
file = '//asb/Analytics/MMM_Konig_Pilsner/Kuba/prepared_data/weather_data_DF_list.RData')
### diagnostics:----
dcs <- ES.list[[2]][[2372]]
View(dcs)
dcs[["url"]]
View(airports)
ES.list[[2]][[2336]]
### diagnostics:----
ES.list[[2]][[2300]]
View(ES.list)
l_test <- lapply(ES.list, function(i) as.character(i))
View(l_test)
l_test <- lapply(ES.list, function(i) as.character(i[['table']]))
View(l_test)
l_test <- lapply(ES.list, function(i) (i[['table']]))
l_test <- lapply(ES.list, function(i) html_text(i[['table']]))
ES.list[[2]][[1]][["table"]]
xmlParse(ES.list[[2]][[1]][["table"]])
xmlParse(ES.list[[2]][[1]][["table"]][[1]])
u <- xmlParse(ES.list[[2]][[1]][["table"]][[1]])
as.character(u)
u <- as.character(ES.list[[2]][[1]][["table"]][[1]])
u
read_html(u)
xmlParse(read_html(u))
l_test <- lapply(ES.list, function(i) as.character(i[['table']][[1]]))
View(l_test)
l_test <- lapply(ES.list[[2]], function(i) as.character(i[['table']][[1]]))
l_test <- lapply(ES.list[[2]], function(i) as.character(i[['table']][[1]]))
l_test <- lapply(ES.list[[2]], function(i) as.character(i[['table']]))
View(l_test)
l_test[[1]]
l_test[[1]]
read_html(l_test[[1]])
xmlParse(read_html(l_test[[1]]))
#### store xml structure as a plain text so you won't lose your data: ----
xmls_as_text <- lapply(ES.list[[2]], function(i) as.character(i[['table']]))
save(xmls_as_text,
file = '//asb/Analytics/MMM_Konig_Pilsner/Kuba/prepared_data/weather_data_xmls_as_text.RData')
shiny::runApp('MVEPhase2/app')
load("P:/MMM_Konig_Pilsner/Kuba/prepared_data/sales.RData")
View(sales.final)
d <- mtcars
d
d %>% select(mpg,
mpg2 = mpg-999
)
library(dplyr)
d <- mtcars
d
d %>% select(mpg,
mpg2 = mpg-999
)
d$mpg
d %>% select(mpg)
d %>% select(mpg = mpg,
mpg_dwa = mpg +999)
d %>% select(
mpg_dwa = mpg +999)
d %>% select(
mpg_dwa =  +999)
d %>% select(
mpg_dwa =  mpg)
d %>% select(mpg_dwa =  mpg)
d %>% select(mpg_dwa =  mpg) %>% head()
d %>% select(mpg_dwa =  mpg,
mpg) %>% head()
d %>% select(mpg_dwa =  mpg,
mpg) %>% head()
d %>% select(mpg_dwa =  mpg,
mpg, cyl) %>% head()
shiny::runApp('Adolfo_WhyR_conf_2018-07-04_HNV_tool/2018-06-25_0919_logo_changed/app')
runApp('Adolfo_WhyR_conf_2018-07-04_HNV_tool/2018-06-25_0919_logo_changed/app')
runApp('Adolfo_WhyR_conf_2018-07-04_HNV_tool/2018-06-25_0919_logo_changed/app')
runApp('Adolfo_WhyR_conf_2018-07-04_HNV_tool/2018-06-25_0919_logo_changed/app')
library(rhandsontable)
rhandsontable(data = mtcars)
my.data <- matrix(rnorm(40), ncol = 4)
my.data <- matrix(rnorm(40), ncol = 4)
rhandsontable(data = my.data)
my.data <- matrix(rnorm(40), nrow = 10)
rhandsontable(data = my.data)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
textInput(txtUser, "User"),
passwordInput(txtPwd, "Password"),
actionButton(btnLogin, "Login")
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
textInput(txtUser, "User"),
passwordInput(txtPwd, "Password"),
actionButton(btnLogin, "Login")
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
textInput(txtUser, "User"),
passwordInput(txtPwd, "Password"),
actionButton(btnLogin, "Login")
)
)
)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
textInput('txtUser', "User"),
passwordInput('txtPwd', "Password"),
actionButton('btnLogin', "Login")
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
textInput('txtUser', "User"),
passwordInput('txtPwd', "Password"),
actionButton('btnLogin', "Login")
)
)
)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
textInput('txtUser', "User"),
passwordInput('txtPwd', "Password"),
actionButton('btnLogin', "Login")
),
mainPanel()
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
install.packages("RMySQL")
library(RMySQL)
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
runApp('_Repos/___PRIV/my_apps/shiny/dockerMySQL_link_containers')
install.packages("DBI")
shiny::runApp()
devtools::install_github("rstats-db/DBI")
shiny::runApp()
